import itertools
import os
import collections
import json
from snakemake.utils import R
from snakemake.exceptions import MissingInputException
NGS_PIPELINE=os.environ['NGS_PIPELINE']
WORK_DIR=os.environ['WORK_DIR']
DATA_DIR=os.environ['DATA_DIR']
ACT_DIR=os.environ['ACT_DIR']
HOST=os.environ['HOST']
TIME=os.environ['TIME']

configfile: NGS_PIPELINE +"/config/config_common.json"
configfile: NGS_PIPELINE +"/config/config_common_tgen.json"
configfile: NGS_PIPELINE +"/config/config_cluster.json"
configfile: NGS_PIPELINE +"config/config_annotation.json"
PATIENTS =[]
for subject in config['subject'].keys():
        PATIENTS.append(subject)
ANNO_FILES =["gene","clinseq","cadd","cosmic","pcg","clinvar","hgmd","match","mcg","docm","candl","tcc","civic"]

ALL_QC = expand("{subject}/{TIME}/annotation/AnnotationInput.{suff}", suff=ANNO_FILES, TIME=TIME, subject=PATIENTS)
rule final:
        input:
                ALL_QC
############
#	table_annovar for:
#		refGene
#		cytoBand
#		snp138
#		1000g2014oct_all
#		1000g2014oct_eur
#		1000g2014oct_afr
#		1000g2014oct_amr
#		1000g2014oct_eas
#		1000g2014oct_sas
#		esp6500_all
#		esp6500_ea
#		esp6500_aa
#		exac03nontcga
#		exac03
#		cg69
#		nci60
############
rule Annovar_Gene:
	input:
		config["annovar_data"]+config["annot_refgene"],
		config["annovar_data"]+config["annot_mrna"],
		config["annovar_data"]+config["annot_cb"],
		config["annovar_data"]+config["annot_snp138"],
		config["annovar_data"]+config["annot_all"],
		config["annovar_data"]+config["annot_eur"],
		config["annovar_data"]+config["annot_afr"],
		config["annovar_data"]+config["annot_amr"],
		config["annovar_data"]+config["annot_eas"],
		config["annovar_data"]+config["annot_sas"],
		config["annovar_data"]+config["annot_espall"],
		config["annovar_data"]+config["annot_espea"],
		config["annovar_data"]+config["annot_espaa"],
		config["annovar_data"]+config["annot_exacnon"],
		config["annovar_data"]+config["annot_exac"],
		config["annovar_data"]+config["annot_cg69"],
		config["annovar_data"]+config["annot_nci60"],
		file="{base}/AnnotationInput.anno",
	output:
		"{base}/AnnotationInput.gene"
	version: config["annovar"]
	params:
		rulename   = "Annot_gene",
		batch      = config[config['host']]["job_annovar"],
		RefData    = config["annovar_data"],
		build      = config["build"],
	shell: """
	#######################
	module load annovar/{version}
	table_annovar.pl {input.file} {params.RefData} -buildver {params.build} -out {input.file} -remove -protocol refGene,cytoBand,snp138,1000g2014oct_all,1000g2014oct_eur,1000g2014oct_afr,1000g2014oct_amr,1000g2014oct_eas,1000g2014oct_sas,esp6500_all,esp6500_ea,esp6500_aa,exac03nontcga,exac03,cg69,nci60 -operation g,r,f,f,f,f,f,f,f,f,f,f,f,f,f,f -nastring "-1"
	mv {input.file} {output}
	sed -i '1s/\./_/g' {output}
	rm -rf {input.file}.refGene.invalid_input
	#######################
	"""
############
# annotate_variation
#	custom ref input. clinseq
############
rule Annovar_Clinseq:
	input:
		file="{base}/AnnotationInput.anno",
		clinseq=config["annovar_data"]+config["annot_clinseq"]
	output: "{base}/AnnotationInput.clinseq"
	version: config["annovar"]
	params:
		rulename   = "Annot_clinseq",
		batch      = config[config['host']]["job_annovar"],
		RefData    = config["annovar_data"],
		build      = config["build"],
	shell: """
	#######################
	module load annovar/{version}
	annotate_variation.pl {input.file} {params.RefData} -buildver {params.build} -otherinfo -filter -dbtype generic -genericdbfile {input.clinseq}
	awk '{{OFS="\\t"}};{{print $3,$4,$5,$6,$7,$2}}' {input.file}.{params.build}_generic_dropped |sed -e 's/,/\\t/g' >{output}
	head -1 {input.clinseq} >>{output}
	rm -rf {input.file}.{params.build}_generic_dropped {input.file}.{params.build}_generic_filtered
	#######################
	"""
################################
# Add CADD annotation
#
################################
rule Annovar_CADD:
	input:
		file="{base}/AnnotationInput.anno",
		cadd=config["annovar_data"]+config["annot_cadd"],
		cadd_indel=config["annovar_data"]+config["annot_caddind"]
	output:
		"{base}/AnnotationInput.cadd",
	version: config["annovar"]
	params:
		rulename   = "Annot_CADD",
		batch      = config[config['host']]["job_annovar"],
		RefData    = config["annovar_data"],
		build      = config["build"],
	shell: """
	#######################
	module load annovar/{version}
	annotate_variation.pl {input.file} {params.RefData} -buildver {params.build} -otherinfo -filter -dbtype cadd
	annotate_variation.pl {input.file} {params.RefData} -buildver {params.build} -otherinfo -filter -dbtype caddindel

	cut -f 2-7 {input.file}.{params.build}_cadd_dropped {input.file}.{params.build}_caddindel_dropped |sed -e 's/,/\\t/g' |awk '{{OFS="\\t"}};{{print $3,$4,$5,$6,$7,$1,$2}}' >$file.cadd
	head -1 {input.cadd_indel} >>$file.cadd
	rm -rf {input.file}.{params.build}_cadd_dropped {input.file}.{params.build}_cadd_filtered {input.file}.{params.build}_caddindel_dropped {input.file}.{params.build}_caddindel_filtered
	#######################
	"""
################################
# Add COSMIC
#
################################
rule Annovar_COSMIC:
	input:
		file="{base}/AnnotationInput.anno",
		cosmic=config["annovar_data"]+config["annot_cosmic"]
	output:
		"{base}/AnnotationInput.cosmic",
	version: config["annovar"]
	params:
		rulename   = "Annot_COSMIC",
		batch      = config[config['host']]["job_annovar"],
		RefData    = config["annovar_data"],
		build      = config["build"],
	shell: """
	#######################
	table_annovar.pl {input.file} {params.RefData} -buildver {params.build} --dot2underline -out {input.file} -remove -protocol cosmic76 -operation f -nastring "NA" 
	mv {input.file}.{params.build}_multianno.txt {output}
	#######################
	"""
################################
# Add PCG
#
################################
rule Annovar_PCG:
	input:
		file="{base}/AnnotationInput.anno",
		pcg=config["annovar_data"]+config["annot_pcg"]
	output:
		"{base}/AnnotationInput.pcg",
	version: config["annovar"]
	params:
		rulename   = "Annot_PCG",
		batch      = config[config['host']]["job_annovar"],
		RefData    = config["annovar_data"],
		build      = config["build"],
	shell: """
	#######################
	module load annovar/{version}
	annotate_variation.pl {input.file} {params.RefData} -buildver {params.build} -otherinfo -filter -dbtype generic -genericdbfile {input.pcg}
	
	awk -F "\\t" '{{OFS="\\t"}};{{print $3,$4,$5,$6,$7,$2}}' {input.file}.{params.build}_generic_dropped |sed -e 's/,/\\t/g' >{output}
	head -1 {input.pcg} >>{output}
	rm -rf $file.{params.build}_generic_dropped $file.{params.build}_generic_filtered
	#######################
	"""
################################
# Add HGMD
#
################################
rule Annot_Custom:
	input:
		tool	=NGS_PIPELINE + "/scripts/addAnnotation.pl",
		file	="{base}/AnnotationInput.anno",
		clinvar	=config["annovar_data"]+config["annot_clinvar"],
		hgmd	=config["annovar_data"]+config["annot_hgmd"],
		match	=config["annovar_data"]+config["annot_match"],
		mcg	=config["annovar_data"]+config["annot_mcg"],
		docm	=config["annovar_data"]+config["annot_docm"],
		candl	=config["annovar_data"]+config["annot_candl"],
		tcc	=config["annovar_data"]+config["annot_tcc"],
		civic	=config["annovar_data"]+config["annot_civic"]
	output:
		clinvar="{base}/AnnotationInput.clinvar",
		hgmd   ="{base}/AnnotationInput.hgmd",
		match  ="{base}/AnnotationInput.match",
		mcg    ="{base}/AnnotationInput.mcg",
		docm   ="{base}/AnnotationInput.docm",
		candl  ="{base}/AnnotationInput.candl",
		tcc    ="{base}/AnnotationInput.tcc",
		civic  ="{base}/AnnotationInput.civic"	
	params:
		rulename   = "Annot_PCG",
		batch      = config[config['host']]["job_annovar"],
		RefData    = config["annovar_data"],
		build      = config["build"],
	shell: """
	#######################
	module load annovar/{version}
	{input.tool} {input.clinvar}	{input.file} >{output.clinvar}
	{input.tool} {input.hgmd}	{input.file} >{output.hgmd}
	{input.tool} {input.match}	{input.file} >{output.match}
	{input.tool} {input.mcg}	{input.file} >{output.mcg}
	{input.tool} {input.docm}	{input.file} >{output.docm}
	{input.tool} {input.candl}	{input.file} >{output.candl}
	{input.tool} {input.tcc}	{input.file} >{output.tcc}
	{input.tool} {input.civic}	{input.file} >{output.civic}	
	#######################
	"""
