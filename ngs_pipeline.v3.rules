
shell.prefix("set -eo pipefail; ")

configfile: "/data/khanlab/projects/patidar/Snakemake/config_common.json"
configfile: "/data/khanlab/projects/patidar/Snakemake/config_cluster.json"

localrules: Khanlab_Pipeline, MuTect
####
#### Targets
####
ALL_SAMPLES = config["samples"]
ALL_FASTQC  = expand("{sample}/fastqc/{sample}_R2_fastqc.html", sample = ALL_SAMPLES)
#ALL_FASTQC  = expand("{sample}/fastqc/{sample}_R1_fastqc.zip", sample = ALL_SAMPLES) + expand("{sample}/fastqc/{sample}_R2_fastqc.zip", sample = ALL_SAMPLES) + expand("{sample}/fastqc/{sample}_R1_fastqc.html", sample = ALL_SAMPLES) + expand("{sample}/fastqc/{sample}_R2_fastqc.html", sample = ALL_SAMPLES)
ALL_BAMS    = expand("{sample}/{sample}.bam", sample = ALL_SAMPLES)
ALL_BAI     = expand("{sample}/{sample}.bam.bai", sample = ALL_SAMPLES) 
ALL_FLAGS   = expand("{sample}/{sample}.bam.flagstat.txt", sample = ALL_SAMPLES)
ALL_DDBAM   = expand("{sample}/{sample}.dd.bam", sample = ALL_SAMPLES)
ALL_FINAL   = expand("{sample}/{sample}.final.bam", sample = ALL_SAMPLES)
MUTECT      = []


somaticPairs = {}
if len(config['sample_references']) > 0:
	for Tumor in config['sample_references']:
		for Normal in config['sample_references'][Tumor]:
			TumorBam = "{sample}/{sample}.final.bam".format(sample=Tumor)
			NormalBam = "{sample}/{sample}.final.bam".format(sample=Normal)
			somaticPairs_bams = [TumorBam, TumorBam + ".bai", NormalBam, NormalBam + ".bai"]
			somaticPairs[Tumor] = somaticPairs_bams
			#somaticPairs[NormalBam + "_vs_" + TumorBam] = somaticPairs_bams
			MUTECT += ["{sample}/{sample}.MuTect.vcf".format(sample=Tumor)]
#			MUTECT += ["{sample}/{ref_sample}_vs_{sample}.MuTect.vcf".format(sample=Tumor, ref_sample=Normal)]

rule Khanlab_Pipeline:
	input: ALL_FASTQC, ALL_FLAGS, ALL_FINAL
#MUTECT

#ALL_FASTQC, ALL_BAMS, ALL_BAI, ALL_FLAGS, ALL_DDBAM
############
#	FASTQC
############
rule fastqc:
	input:
		R1="{sample}/{sample}_R1.fastq.gz",
		R2="{sample}/{sample}_R2.fastq.gz"
	output: 
		"{sample}/fastqc/{sample}_R1_fastqc.zip", 
		"{sample}/fastqc/{sample}_R2_fastqc.zip", 
		"{sample}/fastqc/{sample}_R1_fastqc.html", 
		"{sample}/fastqc/{sample}_R2_fastqc.html"
	log: "{sample}/pbs_log/fastqc"
	version: config["fastqc"]
	threads: 2
	message: "Running Fastqc on {input[0]}"
	params:
		rulename  = "fastqc",
		batch     = config["job_fastqc"]
	shell: """
	#######################
	module load fastqc/{version}
	fastqc -o {wildcards.sample}/fastqc/ -d /scratch {input[R1]} 2> {log}
	fastqc -o {wildcards.sample}/fastqc/ -d /scratch {input[R2]} 2> {log}
	#######################
	"""
############
#       BWA
############
rule BWA:
	input: 
		R1="{sample}/{sample}_R1.fastq.gz", 
		R2="{sample}/{sample}_R2.fastq.gz",
		ref=config["bwaIndex"]
	output: 
		"{sample}/{sample}.bam", 
		"{sample}/{sample}.bam.bai"
	log: "{sample}/pbs_log/bwa"
	version: config["bwa"]
	threads: 32
	message: "Running bwa on {input[0]}"
	params:
		rulename  = "bwa",
		platform  = config["platform"],
		samtools  = config["samtools"], 
		batch     = config["job_bwa"]
	shell: """
	#######################
	module load bwa/{version}
	module load samtools/{params.samtools}
	bwa mem -M  -t {threads} -R \"@RG\\tID:{wildcards.sample}\\tSM:{wildcards.sample}\\tLB:{wildcards.sample}\\tPL:{params.platform}\" {input[ref]} {input[R1]} {input[R2]} 2> {log}| samtools view -Sbh - |samtools sort -m 30000000000 - {wildcards.sample}/{wildcards.sample}
	samtools index {wildcards.sample}/{wildcards.sample}.bam
	#######################
	"""
############
#       Samtools flagstat
############
rule flagstat:
	input:  rules.BWA.output
	output: "{sample}/{sample}.bam.flagstat.txt"
	log:    "{sample}/pbs_log/flagstat"
	version: config["samtools"]
	threads: 1
	message: "Running samtools flagstat on {input[0]}"
	params:
		rulename  = "flagstat",
		batch     = config["job_flagstat"]
	shell: """
	#######################
	module load samtools/{version}
	samtools flagstat {input} > {output}
	#######################
	"""
############
#       Picard Mark Duplicates
############
rule Picard_MarkDup:
	input: bam="{sample}/{sample}.bam"
	output: 
		bam="{sample}/{sample}.dd.bam",
		index="{sample}/{sample}.dd.bam.bai",
		metrics="{sample}/{sample}.markdup.txt"
	log:    "{sample}/pbs_log/markdup"
	version: config["picard"]
	threads: 1
	message: "Running picard mark duplicates on {input[0]}"
	params:
		rulename  = "mark_dup",
		batch     = config["job_markdup"],
		samtools  = config["samtools"]    
	shell: """
	#######################
	MEM=`echo "{params.batch}" |perl -n -e'/--mem=(\d+)/ && print \$1'`
	module load picard/{version}
	java -Xmx${{MEM}}g -Djava.io.tmpdir=/lscratch/${{SLURM_JOBID}} -jar $PICARDJARPATH/MarkDuplicates.jar AS=true M={output.metrics} I={input.bam} O={output.bam} REMOVE_DUPLICATES=false VALIDATION_STRINGENCY=SILENT > {log} 2>&1
	module load samtools/{params.samtools}
	samtools index {output.bam}
	######################
	"""
############
#       GATK Best Practices
############
rule GATK:
	input: 	bam="{sample}/{sample}.dd.bam",
		ref=config["reference"],
		phase1=config["1000G_phase1"],
		mills=config["Mills_and_1000G"]
	output:
		bam="{sample}/{sample}.final.bam",
		index="{sample}/{sample}.final.bai",
	log:    "{sample}/pbs_log/gatk"
	version: config["GATK"]
	threads: 32
	message: "Running GATK Best practices on {input.bam}"
	params:
		rulename  = "gatk",
		batch     = config["job_gatk"]
	shell: """
	#######################
	MEM=`echo "{params.batch}" |perl -n -e'/--mem=(\d+)/ && print \$1'`
	module load GATK/{version}
	java -Xmx${{MEM}}g -Djava.io.tmpdir=/lscratch/${{SLURM_JOBID}} -jar $GATK_JAR -T RealignerTargetCreator -R {input.ref} -known {input.phase1} -known {input.mills} -I {input.bam} -o /lscratch/${{SLURM_JOBID}}/{wildcards.sample}.realignment.intervals > {log} 2>&1
	java -Xmx${{MEM}}g -Djava.io.tmpdir=/lscratch/${{SLURM_JOBID}} -jar $GATK_JAR -T IndelRealigner -R {input.ref} -known {input.phase1} -known {input.mills} -I {input.bam} --targetIntervals /lscratch/${{SLURM_JOBID}}/{wildcards.sample}.realignment.intervals -o /lscratch/${{SLURM_JOBID}}/{wildcards.sample}.lr.bam >>{log} 2>&1
	java -Xmx${{MEM}}g -Djava.io.tmpdir=/lscratch/${{SLURM_JOBID}} -jar $GATK_JAR -T BaseRecalibrator -R {input.ref} -knownSites {input.phase1} -knownSites {input.mills} -I /lscratch/${{SLURM_JOBID}}/{wildcards.sample}.lr.bam -o /lscratch/${{SLURM_JOBID}}/{wildcards.sample}.recalibration.matrix.txt >>{log} 2>&1
	java -Xmx${{MEM}}g -Djava.io.tmpdir=/lscratch/${{SLURM_JOBID}} -jar $GATK_JAR -T PrintReads -R {input.ref} -I /lscratch/${{SLURM_JOBID}}/{wildcards.sample}.lr.bam -o {output.bam} -BQSR /lscratch/${{SLURM_JOBID}}/{wildcards.sample}.recalibration.matrix.txt >>{log} 2>&1
	######################
	"""
############
#       Haplotype Caller
############
############
#       FAKE
############
#rule MuTect:
#	input:
#		"{pairs}"
#	output:
#		vcf="{sample}/{sample}.MuTect.vcf"
#	shell: """
#	echo {input}
#	echo "{input}    \n\n {input}   {output.vcf}" > {output.vcf}
#	"""

############
#       Platypus
############
